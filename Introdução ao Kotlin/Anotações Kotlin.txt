Uma ferramenta para poder praticar o Kotlin
https://play.kotlinlang.org/

Tipos de dado
Int / Long / Float / Double / Array / Boolean / Char / Byte / Short / Null!

Como saber o valor maximo que se pode usar em um tipo de dado use:

println(Int.MAX_VALUE) //para Int

println(Float.MAX_VALUE) //para Float

println(Long.MAX_VALUE) //para Long

println(Byte.MAX_VALUE) //para Byte

println(Short.MAX_VALUE) //para Short


É possivel tambem converter os dados que você tem

toByte()
toShort()
toInt()
toLong()
toFloat()
toDouble()
toChar()

val a: Int = 10   
val b: Int = 20
val total = a + b

println (total.toString()) //Depois de se ter o valor total em inteiro ele converte para String

===============================================================
Declaração de variável

Var(Variável que pode ter seu valor alterado durante o código)
var idade = 22

Val(Variável que terá somente o valor atribuído)
val idade = 22

Const Val(Constante cujo valor é atribuído durante a compilação)
const val IDADE_MIN = 16

===============================================================
Nulabilidade

Qualquer tipo pode ser nulo, porém isso deve ser explicitado na declaração de variável
através do uso da interrogação '?'

var mes : Int? = null //Atribui valor nulo

var mes : Int = null //Não atribui valor nulo

================================================================
Operadores comparativos

maior/menor a > b ou a < b

maoir/menor igual a >= b ou a <= b

igual a == b

diferente a != b

val d = 22
val t = 90

println (d > t) //False

Operadores Lógicos

E (&&) / Ou (||)

Operadores In e range

contém (in) / Não contém (!in) / range/Faixa de valores (int..int)

val numero = listOf(3,9,0,1,2)
print(12 in numero)
//false

print(12 in 0..20)
//true



const val MIN_AGE = 16
const val MAX_AGE = 68

fun main() {
   var age = (10..100).random()
   println(age)
   println(age in MIN_AGE..MAX_AGE)
   println(age >= MIN_AGE && age <= MAX_AGE)
}
//62 true true

==============================================================
Manipulação de String

Concatenação, para concatenar duas String o plus/+ pode ser utilizado
println(nome + sobrenome) //Imprime "Otavio Gomes"

Para concatenar uma variável a uma String, os simbolos ${} devem ser inseridos
println("${nome} ${sobrenome}") //Imprime "Otavio Gomes"

===============================================================
Empty x Blank

Se o tamanho da string (s.length) for 0 está empty e Blank;
Se o tamanho for > 0 mas todos os caracteres são espaços em branco,
está blank mas não empty.

val s = ""
println(s.isEmpty()) //true
println(s.isBlank()) //true

val s = "    "
println(s.isEmpty()) //false
println(s.isBlank()) //true

===============================================================
Funções 

Simplificando uma função

private fun getFullname(name:String, lastName:String):String{
	val fullname = "$name $lastName"
	return fullname
}
//

private fun getFullname(name:String, lastName:String):String{
	return "$name $lastName"
}
//

private fun getFullname(name:String, lastName:String) = "$name $lastName"
//

fun main() {println(somaNumero(9,3))}
fun somaNumero(valor1:Int, valor2:Int) = valor1+valor2
//12

extensões

prefixo Fun Tipo.nomeDaFuncao();
Cria uma função que só pode ser chamada por um tipo específico, cujo o valor
pode ser referenciado dentro da função através da palavra this;

fun String.randomCapitalizedLetter()=
this[(0..this.length-1).random()].toUpperCase()

===============================================================
Estrutura de controle 

if/else, when, elvis operator;
Pode ser utilizado tanto para controle quanto para atribuição;
Pode ser encadeado com múltiplas estruturas;

if(expressao){
	//bloco de codigo
}else if (expressao2){
	//bloco de codigo
}else{
	//bloco de codigo
}

when {
	case1 -> {}
	case2 -> {}
	case3 -> {}
	else -> {}
}

Atribuição

val a = 5
val b = 7

val MaxValue = if (a > b) a else if (a < b) b else b
//b(7)

val minValue = if (a > b){
	println("b($b) é o menor valor")
	b
}else if (a < b){
	println("a($a) é o menor valor")
	a
}else{
	println("os valores são iguais")
	b
}
//a(5)

===============================================================
Repetição

While, do..while, for e forEach;
Estruturas similares ás convencionais em outras linguagens;
Aceita os comandos in, range, until, downTo e step;

while(condicao){
//codigo
}

do{
//codigo
} while(condicao)

//Esse exemplo ira contar de 0 a 20 de 2 em 2
for(i in 0..20 step 2){
	println(i) //0 2 4 6 8 10 12 14 16 18 20
}

For
for(variavelIndexadora in/until/downTo faixa de valores/condicional step intervalo)

in: conta do valor inicial até o valor final estabelecido;
until: conta do valor atual até o valor estabelecido menos 1;
downTo: conta de maneira decrescente;
step: determina o intervalo da contagem;
